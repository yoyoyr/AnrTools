相关文件说明：
    trace.txt : 查看java和虚拟机线程的执行时间，做大概的判断
    anr_info.txt :
        1.查看触发anr的原因
        2.查看anr发生前后系统的cpu，io的负载情况。
        3.查看其他进程的cpu使用率
        4.查看关键进程cpu使用率。kswapd进程过高，为内存紧张。mmcqd进程过高，为io紧张。
    pol_message : 分析主线程的调度能力，历史消息的处理情况，和待处理消息的相关情况。

一些性能数据：低端机，TCL_30SE
    1.message start 几乎不耗时
    2.message end 耗时4-6ms
    3.watch dog损耗 0-1ms
    4.抓取堆栈损耗 0-1ms
    5.捕获am.processInErrorState()耗时 5500ms-6500ms之间。不等待这个信息的获取耗时30ms。



工具可能的问题点：
    1.如果一个耗时的消息导致anr，anr已经触发且完成的时候，消息仍然为执行完，导致anr消息没有记录到消息回溯工具里面？？
        目前的处理是保存消息方法制标志位，当下一次调用handleMessage()的时候保存消息。
        但极端情况，在下一次调用handleMessage()是就杀死进程，会导致保存不及时
    2.为了获取am.processStateErrorInfo()会延迟anr弹窗的出现，极端情况可能7s
    3.如果因为io资源紧张导致的anr，在进程结束前收集的anr信息需要写入文件会不会容易失败？


后期可以完善的点：
    1.根据实际使用效果做调整
    2.touch事件的耗时监控
    3.IdleHandler事件耗时监控
    4.死锁检测机制的引入